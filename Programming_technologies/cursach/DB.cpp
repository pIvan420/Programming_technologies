#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <array>
using namespace std;

class Keto{ //класс кето диеты
private:
    array<string, 7> nutritions = {
        R"(Завтрак: яичница-глазунья с беконом, кофе
Обед: суп-пюре из сельдерея, свиной бифштекс, салат из огурцов, помидоров и капусты
Полдник: 50 г орехов или семечек
Ужин: вареное куриное филе, квашеная капуста)",
        
        R"(Завтрак: сырники, чай
Обед: борщ со сметаной, телячьи ребрышки запеченные, тушеная капуста
Полдник: сыр твердый, 3-5 оливок
Ужин: филе индейки тушеное, брокколи отварная, чай)",
        
        R"(Завтрак: сарделька, жареные кабачки, кофе
Обед: крем-суп из зеленых овощей с плавленым сыром, свиная отбивная
Полдник: вареное яйцо, огурец
Ужин: запеченная рыба на подушке из лука, салат с брынзой и томатом, чай)",
        
        R"(Завтрак: омлет с ветчиной и сладким перцем, чай
Обед: куриный суп, говяжья отбивная, огурец
Полдник: цветная капуста в кляре
Ужин: жареная треска, салат из пекинской капусты, чай)",
        
        R"(Завтрак: творожная запеканка, чай
Обед: борщ с говядиной, жареные баклажаны, помидор
Полдник: йогурт
Ужин: жульен с грибами и курицей, огурец, чай)",
        
        R"(Завтрак: яичница с колбасой, ломтик сыра, чай
Обед: уха, телячий ростбиф, салат из зелени, авокадо, сыра
Полдник: орехи киви
Ужин: тушеные свиные ребра с овощами, чай)",
        
        R"(Завтрак: две сосиски с кабачковой икрой, кофе
Обед: солянка, запеченная свинина, салат из рукколы и огурцов
Полдник: айран
Ужин: жареная рыба в кляре, салат с морепродуктами, чай)"
    };
    
    array<string, 7> workout = {
        R"(Разминка: 5-10 минут кардио разминки (бег на месте, скакалка).
Аэробные упражнения: 30-45 минут быстрой ходьбы на улице или на беговой дорожке.
Силовые тренировки:
Приседания со штангой или гантелями: 3-4 подхода по 8-12 повторений.
Жим гантелей лежа на скамье: 3-4 подхода по 8-12 повторений.
Растяжка и охлаждение: 5-10 минут растяжки ног, спины, грудных и плечевых мышц.)",
        
        R"(Разминка: 5-10 минут легкой кардио разминки (велотренажер).
Аэробные упражнения: 30-45 минут велосипедной тренировки на стационарном велотренажере.
Силовые тренировки:
Тяга верхнего блока или подтягивания: 3-4 подхода по 8-12 повторений.
Военный жим гантелей или штанги стоя: 3-4 подхода по 8-12 повторений.
Растяжка и охлаждение: 5-10 минут растяжки ног, спины, грудных и плечевых мышц.)",
        
        "Отдых или легкая активность, такая как прогулка или йога.",
        
        R"(Разминка: 5-10 минут кардио разминки (бег на месте, скакалка).
Аэробные упражнения: 30-45 минут плавания или аквааэробики.
Силовые тренировки:
Приседания со штангой или гантелями: 3-4 подхода по 8-12 повторений.
Жим гантелей лежа на скамье: 3-4 подхода по 8-12 повторений.
Растяжка и охлаждение: 5-10 минут растяжки ног, спины, грудных и плечевых мышц.)",
        
        R"(Разминка: 5-10 минут легкой кардио разминки (велотренажер).
Аэробные упражнения: 30-45 минут эллиптического тренажера.
Силовые тренировки:
Тяга верхнего блока или подтягивания: 3-4 подхода по 8-12 повторений.
Военный жим гантелей или штанги стоя: 3-4 подхода по 8-12 повторений.
Растяжка и охлаждение: 5-10 минут растяжки ног, спины, грудных и плечевых мышц.)",
        
        "Отдых или легкая активность, такая как прогулка или йога.",
        
        R"(Длительная прогулка на свежем воздухе или другая активность по вашему выбору,
такая как велосипедная поездка или путешествие на природу.)"
    };
public:
    string getNutrition(int num){ //вывод дневного питания
        return nutritions[num];
    }
    string getWorkout(int num){ //вывод тренировки на день
        return workout[num];
    }

};

class Fasting{ //класс интервального голодания
private:
    array<string, 7> nutritions = {
        R"(Окно питания: с 12:00 до 20:00
Завтрак: Омлет из двух яиц с овощами, оливковое масло, хлеб из цельнозерновой муки.
Полдник: Греческий йогурт с орехами и ягодами.
Обед: Салат с куриной грудкой, листовыми зелеными овощами, авокадо и оливковым маслом.
Полдник: Яблоко и орехи.
Ужин: Тушеная рыба с овощами.)",
        
        R"(Окно питания: с 12:00 до 20:00
Завтрак: Омлет из белков с шпинатом и помидорами.
Полдник: Белковый коктейль с орехами.
Обед: Куриная грудка запеченная с овощами.
Полдник: Морковь и гуакамоле.
Ужин: Говяжий стейк с запеченной брокколи.)",
        
        R"(День отдыха или легкая активность.
Уделите внимание питью воды и гидратации.)",
        
        R"(Окно питания: с 12:00 до 20:00
Завтрак: Киш с яйцами, шпинатом и фетой.
Полдник: Творог с ягодами и орехами.
Обед: Греческий салат с оливками, огурцами, помидорами, перцем и фетой.
Полдник: Миндаль и яблоко.
Ужин: Запеченная куриная грудка с овощами.)",
        
        R"(Окно питания: с 12:00 до 20:00
Завтрак: Авокадо тост с яйцом.
Полдник: Греческий йогурт с орехами и ягодами.
Обед: Салат с тунцом, зелеными овощами, оливками и оливковым маслом.
Полдник: Груша и миндаль.
Ужин: Жареная рыба с овощами.)",
        
        R"(Окно питания: с 12:00 до 20:00
Завтрак: Омлет из двух яиц с овощами, оливковое масло, хлеб из цельнозерновой муки.
Полдник: Белковый коктейль с орехами.
Обед: Куриная грудка с овощами на гриле.
Полдник: Морковь и гуакамоле.
Ужин: Говяжий стейк с запеченной брокколи.)",
        
        R"(Окно питания: с 12:00 до 20:00
Завтрак: Киш с яйцами, шпинатом и помидорами.
Полдник: Творог с ягодами и орехами.
Обед: Греческий салат с оливками, огурцами, помидорами, перцем и фетой.
Полдник: Миндаль и яблоко.
Ужин: Запеченная куриная грудка с овощами.)"
    };
    
    array<string, 7> workout = {
        R"(Утро: Интервальная кардио тренировка (например, бег на выносливость или HIIT тренировка) - 30 минут.
Вечер: Силовая тренировка для всего тела (включая упражнения на ноги, грудь, спину, плечи и руки) - 45-60 минут.)",
        
        R"(Утро: Йога или растяжка - 30-45 минут.
Вечер: Аэробная тренировка на выбор (например, плавание, езда на велосипеде, танцы) - 45-60 минут.)",
        
        R"(Утро: Интервальная кардио тренировка - 30 минут.
Вечер: Силовая тренировка верхней части тела (включая упражнения на грудь, спину, плечи и руки) - 45-60 минут.)",
        
        R"(Утро: Пилатес или функциональная тренировка - 45-60 минут.
Вечер: Аэробная тренировка на выбор - 45-60 минут.)",
        
        R"(Утро: Интервальная кардио тренировка - 30 минут.
Вечер: Силовая тренировка нижней части тела (включая упражнения на ноги и ягодицы) - 45-60 минут.)",
        
        R"(Утро: Растяжка или йога - 30-45 минут.
Вечер: Активный отдых на свежем воздухе (прогулка, велосипедная поездка, игры на открытом воздухе) - 60 минут.)",
        
        R"(Отдых или легкая активность на ваш выбор (прогулка, йога, растяжка) - 30-60 минут.)"
    };
public:
string getNutrition(int num){ //вывод дневного питания
        return nutritions[num];
    }
    string getWorkout(int num){ //вывод тренировки на день
        return workout[num]; 
    }
};

class DB {
private:
	vector<string> diets; //диеты
	string userPath = "user.txt"; // ссылка на файл пользователя
	string dietDescriptionPath = "описание.txt"; //файл с описанием диеты
	array<string, 12> monthNames = { //месяца
        "января", "февраля", "марта", "апреля", "мая", "июня",
        "июля", "августа", "сентября", "октября", "ноября", "декабря"
    };
    array<int, 12> daysInMonth = { //дней в месяце
     31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31   
    };
    Keto keto;
    Fasting fasting;
public:
	DB() {
		diets.push_back("Кето диета");
		diets.push_back("Интервальное голодание");
	}

	~DB(){}

	int getCountDiets() { // всего диет в БД
		return diets.size();
	}

	string getDiet(int num) { // получение названия диеты
		return diets[num];
	}

	string getDescription(string diet) { // доделать перегруженную функцию
        return "";
	}

	string getDescription(int dietNum) { // получение кратго описания
		string dietDescription;
		string line; // строка для хранения каждой строки из файла
		ifstream dietfile;
		dietfile.open(diets[dietNum] + " " + dietDescriptionPath);
		if (!dietfile) {
			dietDescription = "Ошибка, файл не найден...\n";
		}
		else {
			while (getline(dietfile, line)) {
				dietDescription += line + '\n';
			}
			dietfile.close();
		}
		return dietDescription;
	}

	string getUserPath() { // ссылка, где хранится файл пользователя
		return userPath;
	}
	
	string getMonth(int month){ //вывод месяца
	    return monthNames[month];
	}
	
	int getMonth(string month){
	    for(int i = 0; i < 12; i++){
	        if(month == monthNames[i])
	        return i;
	    }
	    return -1;
	}
	
	int getDaysInMonth(int month){ //вывод дней в месяце
	    return daysInMonth[month];
	}
	
	int getDaysInMonth(string month){ //вывод дней в месяце
	    int count = 0;
	    for (int i = 0; i < 12; i++){
	        if (month == monthNames[i]){
	            break;
	        }
	       count++;
	    }
	    return daysInMonth[count];
	}
	
	string getNutrition(int num, string name){ //вывод питания 
	    if(num < 7){
    	    if(name == diets[0]){
    	        return keto.getNutrition(num);
    	    }
    	    else if(name == diets[1]){
    	        return fasting.getNutrition(num);
    	    }
    	    else{
    	        return "Диета не найдена";
    	    }
	    }
	    else{
	        return "Неверное число";
	    }
	}
	
	string getWorkout(int num, string name){ //вывод тренировки
	    if(num < 7){
    	    if(name == diets[0]){
    	        return keto.getWorkout(num);
    	    }
    	    else if(name == diets[1]){
    	        return fasting.getWorkout(num);
    	    }
    	    else{
    	        return "Тренировка не найдена";
    	    }
	    }
	    else{
	        return "Неверное число";
	    }
	}
};